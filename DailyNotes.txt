DAY-1:
========

JAVA:
=====

Language:
==========
English:communication purpose


Programming Language:
====================

		  communication with machine
		
			
		POP									OOP
B,BCPL,C,COBOL,PHOTON..				c++,java,python,.net,lisp,smalltalk....OOPL
			
									OOPS
	1)performance					1)performance :inheritance,polymorphisam
	
	2)security						2)secuirty	  :abstraction,encapsulation	


WHY Java?/OAK

Sun microsystem:james gosling

1995


	https://www.javatpoint.com/javafx-how-to-install-java


	1)Platform Independent 
	
	2)Garbage Collection	useless	



"Welcome to iversion"

26 -->alphabets

33 keywords-->python


53 keywords--JAVA -->keywords in java lowercase 

Welcome.java


class Welcome
{

public static void main(String args[])
{
System.out.println("Welcome to iversion");

}


}
compiler 

.class

JVM-->output 

Platform Independent 

	1 javaapp:windows,mac,linux....

			oracle 						microsoft
			
			java:WORA					.net  (Platform dependent )windows

											
										linux




100 1mb	:garbage collector  c,c++



Identifiers:
============
		any name java will call it as identifier 

	var name,class name,method name,interface name ,obj name

		
				a-z
				A-Z
				0-9
				$,_



Eclipse IDE 

								JAVA
								
					JSE               JEE                 JME	
corejava,awt,swings,applets..	servlet,jsp,spring....		Android	
	java applications


1)standalone /dekstop  		calculator/docx/excel/anti virus/media player...

2)web app					gmail,facebook,insta.....URL's

3)distributed app       		app1<-->app2 (webservices)

4)mobile app               Android




Variables:
==========its name given to memory location

		mobile contactnum
		
		
			sandeep		54554545


2 types 
		local	:inside the method /block
		global  :outside the method /block


		syntax:datatype varname=value;

							75.54576575756
datatype:

		PDT													NPDT
byte		1 byte(8 bites)		-128 to 127							String,Arrays...
short		2 bytes 		-32768 to 32767
int 		4 bytes			-2147483648 to -2147483647
long		8 bytes 		-2 power 63 to (2 power 63)-1

float		4 bytes				float value=234.34f;
double		8 bytes

boolean	 	1 bit					true-1,false-0
char  		2 bytes 				'M'

						long	age=30;   8 
							byte age=30;  1
							
							9494348734
							
	Instance and static:
==========================	
							
	4 differences
		
					javac filename.java
					java classname  JVM
	
	syntax:
	
	static int countryCode=123;
		   int empId=222;
	
	
	memory:
		static variables/methods will get memory only once at the time of class loading into JVM .
		instance variables/methods will get memory at the time of object creation.
		local variables will get memory at the time of method execution
	
		class A
		{
		 int empId=222;//4 bytes
		 
		 main
		 {
		 //classname objref=new classname();
			A a=new A();
		 }
		 
		}
	access:
		static properties can be accessed by using classname 
		instance properties can be accessed by using objref
	
	
	usage:

		static String orgname="iversion"
		
		eid,accno,phonenum,....instnace

flow control/operators
=======================

if,else,for,dowhile,while,switch

https://www.geeksforgeeks.org/operators-in-java/

	block with statements
method syntax:
=============
public static void main(String[] args) 


accessmodifier static/non-static returntype  methodname(params list) method signature
{



}

package:
==========



//2 types packages

//user defined 			pre defined --->import






runtime data:
==============
java.util.Scanner 

wrapperclasses 8


OOPS:		OOPL
=====
	inheritance,polymorphisam		-->performance
	
	encapsulation,abstraction		-->secuirty


Inheritance:	extends ,implements
===========
it is a process aquiring features form one class to another class 

CODE REUSABILITY
		class A
		{
		//20 methods
		//10 variables
		
		}
					//code reusability -->performance 

		class B extends A
		{
		//10 methods
		//5 variables
		
		
		
		}


NOTE:
=====
1)for every java file by default package available :java.lang
1)for every java class by default parent class :java.lang.Object -->11


public   	:Every where we can access(with in package & outside package  )

protected   :with in package every where but outside package when child

private 	:class level scope

default 	:package level scope

instance and static method

abstract method and concrete method



public void m1()
{


}

//concrete method /non abstract method


public abstract void m1();//abstract



Abstraction: HIDING THE IMPLEMENTATION BY SHOW CASING FUNCTIONALITIES

			abstract class ,interface


class:				class is a collection of only concrete methods

abstract class:  abstractclass is a combination of both concrete and abstract methods 

interface :		interface is a collection of only abstract methods  


Multiple inheritance not  supported by java @class level


Multiple inheritance   supported by java @interface level



interface Parent              interface Parent1

{							{

	m1();					m1();
}							}

		

class Child implements Parent,Parent1
{
main()
{
Child ch=new Child();
ch.m1();//compiler



}
m1()
{


}


}



Polymorphisam:
==============
		many forms 
		
			method overloading
			 method name is  same signature is different 
									no of params
									order of params
									type of params 
			
			method overriding 
				method name is same implementation is different 


Encapsulation:
==============
	wrapping the data and methods together as a signle unit 


string,arrays,collections,exception handling


String,StringBuffer,StringBuilder: java.lang
=================================
		
		"@qA90..."
		



Sting is immutable

StringBuffer,StingBuilder -->mutable


synchronized




public void m1()
{



}

public synchronized void m1()
{



}

https://www.w3schools.com/java/java_ref_string.asp




Exception Handling:
=======================




// 1.system defined error message 
		// 2. abnormal termination
		
		//1.user friendly error messages
		//2.normal termination

try,catch,finally,throw,throws


throw new exceptionclassname();

throws
	
	Arrays:
	======
		1)Arrays are fixed in size 		AIOE  5-->7
		
		2)Arrays can hold only homogeneous/similar data 
		
		3)no utility methods
		
	
		int a[]={12.3f,12,"sandeep"}//invalid
	
	
	Collections:
	===========
			1)collections are not fixed in size /growable in nature .
		
			2)collections can store both homogeneous/heterogeneous data .
	
			3)lots of utility methods
	
	collection framework
			List,Set,Queue,Map
	
		List:
		======
			1)Duplicates are allowed 
			2)Insertion order preserved 
	
	
	
Spring Framework:
==================
	
	spring NON-INVASIVE framework,which is used to create LIGHT WEIGHT & LOOSLEY COUPLED applications
	
	
				hibernate,jpa,struts,jsf,ejb....
	
	
			invasive : 	struts->implementation
			
			non-insaive :spring,hibernate-->
	
	
	Servlet-->web applications,EJB

class 
	1)implements servlet 
	
	2)extends GenericServlet
	
	3)A extends HttpServlet  -->11
	
	
	login ,register,home...

100*11-->1100  heavy weight component

heavy weight 


	A extends HttpServlet
	
	
	EJB
	
	Rod JOhnson-->interface21 -->spring --->1.x 2003
	
											5.x
											6.x
	
	light weight components 
	
	
	
	tightly coupled 
	Loosley coupled
	
	
	spring :dependency injection container :BeanFactory & ApplicationContext
	
	class A1
	{
	
	
	}
	
			spring container-->BeanFactory,ApplicationContext 
			
		class B{
		

		
		}
	
	spring modules
		
		SPRING CORE /Dependency injection module /IOC module 
		spring jdbc
		spring orm
		spring mvc
		spring web
		spring aop
		spring security
		spring rest
		....
	
	spring core :
	=============
	setter injection
	constructor injection
	autowiring -->injecting 
	
	
	
	life cycle of a object 
		1)creation of object
		2)configuring 
		3)wiring 
		4)destroying the object 
	
	BeanFactory,ApplicationContext
	
	
	
	A,B,C,,,......configuration file
	
						XML config	xmlfile 	 <beans><bean><property><constructor-arg> ref,class,id,autowire,scope...
						annotation config user defined  annotations @COmponent,@COmponentScan,@Configuration@Autowired,@scope,@Component,@Qualifier
						java config
						
	Employee{
	
	
	
	}					springconfig.xml
	
	Client
	{
	main(){
	BeanFactory--->sprigconfig.xml  --><beans> <bean> schema/dtd
	getBean()
	}
	
	}
	
	
	JARS,maven
	
	
	
	
	maven--->
	
	
	  <bean class="com.iverson.springcore.Employee" id="emp">
  
  
		</bean>  
    
    
	
	Employee emp=new Employee();
	
	Autowiring:
	=============	injecting dependent object automatically
	
			byname,bytype,constructor
			
			
			scope="prototype"/"singleton"
			
			
			
			Java config:
			
			
			spring has given annotations for user defined classes but not for predefined classes 
			
						@Component/@Service/@Repository-->layered architecture 
			dao/repository
			
			Service Layer/business 
			
			controller layer /ui layer 
			
			
		@Bean  <bean><xml>
			
			
			
			
			
			
			
			https://dev.mysql.com/downloads/installer/
			
		install
		mysql,oracle,db2,postgres,mongodb......
		
	Database mysql:
	===================RDBMS
	
	
	employee:id,name,sal,add,desg...tables-->rows and column
	
			
	SQL
	
			DDL,DML,DRL
	
	
	
	DDl-->create,alter,drop,truncate,rename
	
	DML-->insert,update,delete
	
	DRL-->Select
	
	
	
create database iverson;
use iverson;
create table employees(eid int,ename varchar(15),esal int,edesg varchar(15));
describe employees;
alter table employees add address varchar(10);
alter table employees drop column edesg;
alter table employees change eid empno int;
alter table employees rename to emps;
alter table emps rename to employees;
drop table employees;#delete entire table including data
truncate table employees;#delete only data

insert into employees values(123,'sandeep',9000,'trainer');
insert into employees values(124,"naresh",40000,"developer");
insert into employees values(125,"rajesh",50000,"admin");
insert into employees values(126,"somesh",30000,"hr");
insert into employees values(127,"suresh",35000,"developer");
insert into employees values(128,"hitesh",45000,"trainer");
insert into employees(eid,ename) values(129,'ifphang');
select eid,ename from employees;

update employees set esal=esal+5000 where edesg="developer";

delete from employees where esal<10000;

select * from employees where edesg="trainer";

select max(esal) from employees;
select min(esal) from employees;
select avg(esal) from employees;
select sum(esal) from employees;



constraints:
============

#unique,notnull,check,pk,fk
create table students(stuid int unique,stuname varchar(10) not null,stumarks int check(stumarks>500));

insert into students values(1,"mahesh",550);
insert into students values(2,"suresh",450);
insert into students(stuname,stumarks) values("rajesh",650);
select * from students;

#PK=Unique+notnull

create table students1(stuid int primary key,stuname varchar(10) not null,stumarks int check(stumarks>500));

insert into students1 values(1,"mahesh",550);

insert into students1(stuname,stumarks) values("rajesh",650);
	
	
	java sunmicrosystem
JDBC: API
	
			database  <----> JAVA App
	
					mysqlconnector.jar
	.java 
	
	5 steps
	
	1)loading the driver class
	
	2)creating the connection
	
	3)creating the statement 
	
	4)executing query
	
	5)close the connection
	
	
JPA	:java persistance api sun micro system

		JPA-->JDBC

	Jpa->specification
	
	ORM tools
	
			hibernate,ibatis,eclipselink,mybatis,toplink...
	
	
	JPA-->hibernate
	
	
	no querys
	no table creation
	no checked exceptions
	no boiler plate code 
	.....
	
	ORM-->object relational mapping 
	
	
	Employee class 			------>employee Table
	
	id 						--->columns of table
	name
	salary
	desg
	
	emp obj					--->row/record
	
	
	
	
	EntityManagerFactory
	
	EntityManager 
	
			methods
			
				persist()-->insert
				merge()	 -->update
				remove() -->delete
				find() -->	select
				
				DML-->transaction-->session
	
	
			DML-->begin -->commit
	
	
							createQuery()
	
	
	@Entity
	@Table(name="iverson_emps")
	Employee               employee
	
	@Id -> PK
	@Column(name="empid",length=10)
	id 
	name
	salary
	address
	desg
	
	
	
	CLient
	main
		EntityManagerFactory
		entityManager
				persist()-->insert
				merge()	 -->update
				remove() -->delete
				find() -->	select
			
	
	
	persistence.xml
		Database properties
			Driverclass
			url
			username
			password
			
		hibernate properties

			dialect class-->MysqlDialect
			
			show_sql-->true
			
			hbm2ddl.auto-->create/update 
		
		non-invasive
	JPA jars + mysql jar
	
	
	persistence.xml
	
	<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                      http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
  version="2.0">
	<persistence-unit name="sleeping" transaction-type="RESOURCE_LOCAL">
	
		<properties>
		<!-- database properties -->
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/ktg" />
			<property name="javax.persistence.jdbc.user" value="root" />
			<property name="javax.persistence.jdbc.password" value="rpsconsulting" />
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
			
		<!--   hibernate properties  -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect" />
			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.hbm2ddl.auto" value="update" /><!-- CREATE/UPDATE -->
		
		</properties>
	</persistence-unit>
</persistence>  
							